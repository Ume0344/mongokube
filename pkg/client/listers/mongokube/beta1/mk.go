/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package beta1

import (
	beta1 "mongokube/pkg/apis/mongokube/beta1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MkLister helps list Mks.
// All objects returned here must be treated as read-only.
type MkLister interface {
	// List lists all Mks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*beta1.Mk, err error)
	// Mks returns an object that can list and get Mks.
	Mks(namespace string) MkNamespaceLister
	MkListerExpansion
}

// mkLister implements the MkLister interface.
type mkLister struct {
	indexer cache.Indexer
}

// NewMkLister returns a new MkLister.
func NewMkLister(indexer cache.Indexer) MkLister {
	return &mkLister{indexer: indexer}
}

// List lists all Mks in the indexer.
func (s *mkLister) List(selector labels.Selector) (ret []*beta1.Mk, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*beta1.Mk))
	})
	return ret, err
}

// Mks returns an object that can list and get Mks.
func (s *mkLister) Mks(namespace string) MkNamespaceLister {
	return mkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MkNamespaceLister helps list and get Mks.
// All objects returned here must be treated as read-only.
type MkNamespaceLister interface {
	// List lists all Mks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*beta1.Mk, err error)
	// Get retrieves the Mk from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*beta1.Mk, error)
	MkNamespaceListerExpansion
}

// mkNamespaceLister implements the MkNamespaceLister
// interface.
type mkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Mks in the indexer for a given namespace.
func (s mkNamespaceLister) List(selector labels.Selector) (ret []*beta1.Mk, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*beta1.Mk))
	})
	return ret, err
}

// Get retrieves the Mk from the indexer for a given namespace and name.
func (s mkNamespaceLister) Get(name string) (*beta1.Mk, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(beta1.Resource("mk"), name)
	}
	return obj.(*beta1.Mk), nil
}
